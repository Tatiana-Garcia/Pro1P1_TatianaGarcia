/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package pro1p1_tatianagarcia;

import java.util.Random;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author tatig
 */
public class Recursion extends javax.swing.JFrame {
    static Random aleatorio = new Random();
    static int k;

    /**
     * Creates new form Recursion
     */
    public Recursion() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        BaD = new javax.swing.JButton();
        DaB = new javax.swing.JButton();
        Recursion = new javax.swing.JButton();
        Regresar = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));

        jLabel1.setFont(new java.awt.Font("Merry Christmas Flake", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("11Proyecto 0Laboratorio 11");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(74, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(62, 62, 62))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        BaD.setBackground(new java.awt.Color(102, 102, 102));
        BaD.setFont(new java.awt.Font("Merry Christmas Star", 1, 24)); // NOI18N
        BaD.setForeground(new java.awt.Color(204, 204, 204));
        BaD.setText("Binario a Decimal");
        BaD.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        BaD.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        BaD.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                BaDMouseClicked(evt);
            }
        });

        DaB.setBackground(new java.awt.Color(102, 102, 102));
        DaB.setFont(new java.awt.Font("Merry Christmas Star", 1, 24)); // NOI18N
        DaB.setForeground(new java.awt.Color(204, 204, 204));
        DaB.setText("Decimal a Binario");
        DaB.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DaB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        DaB.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                DaBMouseClicked(evt);
            }
        });

        Recursion.setBackground(new java.awt.Color(102, 102, 102));
        Recursion.setFont(new java.awt.Font("Merry Christmas Star", 1, 24)); // NOI18N
        Recursion.setForeground(new java.awt.Color(204, 204, 204));
        Recursion.setText("Menu de Recursi√≥n");
        Recursion.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Recursion.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Recursion.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RecursionMouseClicked(evt);
            }
        });

        Regresar.setFont(new java.awt.Font("Merry Christmas Star", 1, 24)); // NOI18N
        Regresar.setForeground(new java.awt.Color(0, 0, 0));
        Regresar.setText("<<Menu");
        Regresar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegresarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(172, 172, 172)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(Recursion, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                            .addComponent(DaB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(BaD, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(Regresar, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 71, Short.MAX_VALUE)
                .addComponent(BaD, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(DaB, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(Recursion, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(58, 58, 58)
                .addComponent(Regresar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 400));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BaDMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BaDMouseClicked
        int num = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese el numero binario: "));
        JOptionPane.showMessageDialog(null, "El numero decimal de "+num+" es: "+Decimal(num,0));
        
        
    }//GEN-LAST:event_BaDMouseClicked

    private void DaBMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_DaBMouseClicked
        
        
        int num = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese el numero decimal: "));
        
        JOptionPane.showMessageDialog(null, "El numero binario de "+num+" es: "+Binario(num));
    }//GEN-LAST:event_DaBMouseClicked

    private void RecursionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RecursionMouseClicked
        int fil1 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de filas: "));
        int col1 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de columnas: "));
        int fil2 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de filas: "));
        int col2 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de columnas: "));
        if(col1 != fil2)
        {
            do {
                JOptionPane.showMessageDialog(null, "EL numero de columnas en la 1era matriz debe ser igual al numero de filas en la segunda"
                        + "\nintente de nuevo");
                fil1 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de filas: "));
                col1 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de columnas: "));
                fil2 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de filas: "));
                col2 = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese numero de columnas: "));
            }while (col1 != fil2);
        }
        
        int matriz[][] = new int[fil1][col1];
        int matriz0[][]= new int [fil2][col2];
        int matrizc[][]= new int [fil1][col2];
        k = fil2-1;
        
        //Para la mayor facilidad al recorrer las matrices se les resta una unidad a los valores
        // de las filas y columnas y del valor k(que seria el valor en comun de fil2 y col1)
        
        int matriz1[][] = lectura(matriz,fil1-1,col1-1);
        int matriz2 [][] = lectura(matriz0,fil2-1,col2-1);
        int matrizfinal[][] = multiplicacion(matriz1,matriz2,matrizc, fil1-1,col2-1);
        
        JOptionPane.showMessageDialog(null, "Matriz A: \n"+imprimir(matriz1,fil1-1,col1-1,"")
                + "\n Matriz B: \n"+imprimir(matriz2,fil2-1,col2-1,"")
                +"\n Matriz C: \n"+imprimir(matrizfinal,fil1-1,col2-1,""));
        
    }//GEN-LAST:event_RecursionMouseClicked

    private void RegresarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegresarMouseClicked
        Menu back = new Menu();
        back.setVisible(true);
        back.pack();
        back.setLocationRelativeTo(null);
        back.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_RegresarMouseClicked
    
    public int[][]lectura(int[][]matriz, int fil, int col)
    {
        //Este metodo funciona casi parecido al metodo de imprimir matrices con 2 ciclos for 
        //solo que se hacen algunos cambios y de manera distinta
        //En vez de usar dos for, asi como este recorreria 1ero la variable por las columnas y luego en las filas
        //los if harian los mismo y sus valores empezarian desde la cantidad filas o columnas y terminarian al ser ambas
        //para luego retornar la matriz, como pasa en los for. 
        matriz [fil][col] = aleatorio.nextInt(10);
        if (col != 0)
        {
            return lectura(matriz,fil,col-1);
        }
        else if (fil != 0)
        {
            return lectura(matriz, fil-1, matriz[0].length-1);
        }
        else{
            return matriz;
        }
    }
    
    public String imprimir(int[][]matriz, int fil, int col, String cadena)
    {
        cadena += "["+matriz[fil][col]+"]";
        //En la impresion se puede implentar la misma idea que la lectura, asi como los demas metodos
        //que involucren matrices. Se llenada la cadena con el valor en la ubicacion defina por fil y col en la matriz 
        //se le van restados -1 como en los for para que vayan recorriendo las posioiones de filas y columnas 
        
        if (col != 0)
        {
            return imprimir(matriz, fil, col-1, cadena);
        }
        else if (fil != 0)
        {
            cadena += "\n";
            return imprimir(matriz,fil-1,matriz[0].length-1,cadena);//lit hasta el mismo error de la matriz hay que aplicarle
        }
        else
        {
            return cadena;
        }
    }
    
    public static int rowProduct (int matriz[][], int matriz2[][],int i, int j, int k)
    {
        //
        //En este metodo aplique casi el mismo caso del metodo que tenia de matrices que hice para PrograI
        //se mulitplica el valores de las matrices A y B acorde a su posicion acorde a las filas y columnas
        // y estos valores se suman acorde va recorriendo las columnas de la fila acorde a lo que manda
        //multiplicacion.
        
        //System.out.println("1: "+matriz[i][k]+" 2: "+matriz2[k][j]);
        int integer = (matriz[i][k]*matriz2[k][j]); 
        //System.out.println("Int: "+integer);
        
        if(k != 0)
        {
            integer += rowProduct(matriz,matriz2,i,j,k-1);
            
        }
        else{
        }
        //System.out.println("valor de i: "+i+"\nvalor de j: "+j+"\nvalor de k: "+k);
        return integer;
    }
    
    public static int [][] multiplicacion(int matrizA[][],int matrizB[][],int matrizC[][], int i, int j)
    {
        //Esta parte recorre la matriz C tal como los anteriores metodos de imprimir y lectura
        
        matrizC[i][j]=rowProduct(matrizA,matrizB,i,j,k);
        
        if (j != 0)
        {
            multiplicacion(matrizA,matrizB,matrizC,i,j-1);
        }
        else if (i != 0)
        {
            multiplicacion(matrizA,matrizB,matrizC,i-1,matrizC[0].length-1);
        }
        return matrizC;  
    }
    
    
    //Se saca el residuo de x (el numero ingresado), que nos daran los digitos para el numero binario
    //Estos digitos se sacan del residuo de cuando x es dividido entre dos
    //y para conseguir la estrucutra de los numeros binarios se multiplica por 10 para que nos solo 0s o 1s
    public int Binario(int x)
    {
        if(x <=1)
        {
            return x;
        }
        else
        {
            return x%2+Binario(x/2)*10;
        }
    }
    public int Decimal(int x, int con)
    {
        int res = x%10;//residuo para obtener el ultimo digito ya sea 1 o 0 
        int power = (int)Math.pow(2,con); //2 siempre sera la base y el contador ira incrementando 
        if(x < 1)
        {
            return x;
        }
        else
        {
            return res*power+Decimal(x/10,con+1);//el residuo es multiplicado por el poder
            //los numeros si eran dividiendo para obtener por separado cada dijito y el contador ira incrementado
            //para multiplicar dichos digitos e irlos sumando la recursion
            //
            
        } 
    }
    ///Ejemplo Binario a Decimal 
    /*
        10011
        1 x 2^0 = 1
        1 x 2^1 = 2
        0 x 2^2 = 0
        0 x 2^3 = 0
        1 x 2^4 = 16
      ---------------
        Total === 19
    */
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recursion.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Recursion().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BaD;
    private javax.swing.JButton DaB;
    private javax.swing.JButton Recursion;
    private javax.swing.JLabel Regresar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
